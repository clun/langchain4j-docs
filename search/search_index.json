{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Home</p>"},{"location":"cheat/","title":"Cheat","text":""},{"location":"cheat/#executable-code-replit","title":"Executable Code (REPLIT)","text":""},{"location":"cheat/#mermaids","title":"Mermaids","text":""},{"location":"cheat/#1-flow","title":"1\ufe0f\u20e3 Flow","text":"<p>Cassandra</p> GraphCode <pre><code>graph LR\n    user&gt;fa:fa-user Developer]-- Create Database --&gt; cassandra[(fa:fa-database Cassandra)]\n\n    user-- Design --&gt;usecase{{fa:fa-cube Use Case}}\n    usecase-- Workflow --&gt;queries[fa:fa-bezier-curve queries]\n    usecase-- MCD --&gt;entities[fa:fa-grip-vertical entities]\n    queries-- Chebotko modelization --&gt;schema[fa:fa-list schema]\n    entities-- Chebotko modelization --&gt;schema[fa:fa-list schema]\n    schema[fa:fa-list  schema]-- Inject --&gt;cassandra[(fa:fa-database Cassandra)]\n\n    user-- prepare --&gt;dataset{{fa:fa-coings DataSet}}\n    dataset-- input --&gt;dsbulk-- load data --&gt;cassandra\n\n    user-- Create Token --&gt;token{{fa:fa-key Token}}\n    usecase--&gt;API\n\n    API--&gt;Request\n    token--&gt;Request\n    schema--&gt;Request\n    Request-- invoke --&gt;cassandra</code></pre> <pre><code>graph LR\n    user&gt;fa:fa-user Developer]-- Create Database --&gt; cassandra[(fa:fa-database Cassandra)]\nuser-- Design --&gt;usecase{{fa:fa-cube Use Case}}\nusecase-- Workflow --&gt;queries[fa:fa-bezier-curve queries]\nusecase-- MCD --&gt;entities[fa:fa-grip-vertical entities]\nqueries-- Chebotko modelization --&gt;schema[fa:fa-list schema]\nentities-- Chebotko modelization --&gt;schema[fa:fa-list schema]\nschema[fa:fa-list  schema]-- Inject --&gt;cassandra[(fa:fa-database Cassandra)]\nuser-- prepare --&gt;dataset{{fa:fa-coings DataSet}}\ndataset-- input --&gt;dsbulk-- load data --&gt;cassandra\n\nuser-- Create Token --&gt;token{{fa:fa-key Token}}\nusecase--&gt;API\n\nAPI--&gt;Request\n    token--&gt;Request\n    schema--&gt;Request\n    Request-- invoke --&gt;cassandra\n</code></pre> <p>Example #1</p> OutputMarkdown <pre><code>graph TD;\n  A--&gt;B;\n  A--&gt;C;\n  B--&gt;D;\n  C--&gt;D;</code></pre> <pre><code>   ```mermaid\n   graph TD;\n     A--&gt;B;\n     A--&gt;C;\n     B--&gt;D;\n     C--&gt;D;\n   ```\n</code></pre> <p>Example3</p> OutputMarkdown <pre><code>graph TD\n  A[Hard] --&gt;|Text| B(Round)\n  B --&gt; C{Decision}\n  C --&gt;|One| D[Result 1]\n  C --&gt;|Two| E[Result 2]</code></pre> <pre><code>   ```mermaid\n   graph TD\n     A[Hard] --&gt;|Text| B(Round)\n     B --&gt; C{Decision}\n     C --&gt;|One| D[Result 1]\n     C --&gt;|Two| E[Result 2]\n   ```\n</code></pre>"},{"location":"cheat/#2-sequence","title":"2\ufe0f\u20e3 Sequence","text":"OutputMarkdown <pre><code>sequenceDiagram\nAlice-&gt;&gt;John: Hello John, how are you?\nloop Healthcheck\n    John-&gt;&gt;John: Fight against hypochondria\nend\nNote right of John: Rational thoughts!\nJohn--&gt;&gt;Alice: Great!\nJohn-&gt;&gt;Bob: How about you?\nBob--&gt;&gt;John: Jolly good!</code></pre> <pre><code>   ```mermaid\n   sequenceDiagram\n   Alice-&gt;&gt;John: Hello John, how are you?\n   loop Healthcheck\n       John-&gt;&gt;John: Fight against hypochondria\n   end\n   Note right of John: Rational thoughts!\n   John--&gt;&gt;Alice: Great!\n   John-&gt;&gt;Bob: How about you?\n   Bob--&gt;&gt;John: Jolly good!\n\n   ```\n</code></pre>"},{"location":"cheat/#3-gantt","title":"3\ufe0f\u20e3 Gantt","text":"OutputMarkdown <pre><code>gantt\nsection Section\nCompleted :done,    des1, 2014-01-06,2014-01-08\nActive        :active,  des2, 2014-01-07, 3d\nParallel 1   :         des3, after des1, 1d\nParallel 2   :         des4, after des1, 1d\nParallel 3   :         des5, after des3, 1d\nParallel 4   :         des6, after des4, 1d</code></pre> <pre><code>   ```mermaid\n   gantt\n   section Section\n   Completed :done,    des1, 2014-01-06,2014-01-08\n   Active        :active,  des2, 2014-01-07, 3d\n   Parallel 1   :         des3, after des1, 1d\n   Parallel 2   :         des4, after des1, 1d\n   Parallel 3   :         des5, after des3, 1d\n   Parallel 4   :         des6, after des4, 1d\n\n   ```\n</code></pre>"},{"location":"cheat/#4-class","title":"4\ufe0f\u20e3 Class","text":"OutputMarkdown <pre><code>classDiagram\nClass01 &lt;|-- AveryLongClass : Cool\n&lt;&lt;interface&gt;&gt; Class01\nClass09 --&gt; C2 : Where am i?\nClass09 --* C3\nClass09 --|&gt; Class07\nClass07 : equals()\nClass07 : Object[] elementData\nClass01 : size()\nClass01 : int chimp\nClass01 : int gorilla\nclass Class10 {\n &lt;&lt;service&gt;&gt;\n int id\n size()\n}</code></pre> <pre><code>   ```mermaid\n   classDiagram\n   Class01 &lt;|-- AveryLongClass : Cool\n   &lt;&lt;interface&gt;&gt; Class01\n   Class09 --&gt; C2 : Where am i?\n   Class09 --* C3\n   Class09 --|&gt; Class07\n   Class07 : equals()\n   Class07 : Object[] elementData\n   Class01 : size()\n   Class01 : int chimp\n   Class01 : int gorilla\n   class Class10 {\n    &lt;&lt;service&gt;&gt;\n    int id\n    size()\n   }\n\n   ```\n</code></pre>"},{"location":"cheat/#5-state","title":"5\ufe0f\u20e3 State","text":"OutputMarkdown <pre><code>stateDiagram-v2\n[*] --&gt; Still\nStill --&gt; [*]\nStill --&gt; Moving\nMoving --&gt; Still\nMoving --&gt; Crash\nCrash --&gt; [*]</code></pre> <pre><code>   ```mermaid\n   stateDiagram-v2\n   [*] --&gt; Still\n   Still --&gt; [*]\n   Still --&gt; Moving\n   Moving --&gt; Still\n   Moving --&gt; Crash\n   Crash --&gt; [*]\n\n   ```\n</code></pre>"},{"location":"cheat/#6-pie","title":"6\ufe0f\u20e3 Pie","text":"OutputMarkdown <pre><code>pie\n\"Dogs\" : 386\n\"Cats\" : 85\n\"Rats\" : 15</code></pre> <pre><code>   ```mermaid\n   pie\n   \"Dogs\" : 386\n   \"Cats\" : 85\n   \"Rats\" : 15\n\n   ```\n</code></pre>"},{"location":"cheat/#7-journey","title":"7\ufe0f\u20e3 Journey","text":"OutputMarkdown <pre><code>journey\n  title My working day\n  section Go to work\n    Make tea: 5: Me\n    Go upstairs: 3: Me\n    Do work: 1: Me, Cat\n  section Go home\n    Go downstairs: 5: Me\n    Sit down: 3: Me</code></pre> <pre><code>   ```mermaid\n   journey\n    title My working day\n    section Go to work\n      Make tea: 5: Me\n      Go upstairs: 3: Me\n      Do work: 1: Me, Cat\n    section Go home\n      Go downstairs: 5: Me\n      Sit down: 3: Me\n\n   ```\n</code></pre>"},{"location":"cheat/#8-er","title":"8\ufe0f\u20e3 ER","text":"OutputMarkdown <pre><code>erDiagram\n  CUSTOMER ||--o{ ORDER : places\n  ORDER ||--|{ LINE-ITEM : contains\n  CUSTOMER }|..|{ DELIVERY-ADDRESS : uses</code></pre> <pre><code>   ```mermaid\n   erDiagram\n     CUSTOMER ||--o{ ORDER : places\n     ORDER ||--|{ LINE-ITEM : contains\n     CUSTOMER }|..|{ DELIVERY-ADDRESS : uses\n   ```\n</code></pre>"},{"location":"cheat/#sample-blocs","title":"Sample Blocs","text":"<p>THis is a note</p> <p>my note</p> <p>abstract</p> <p>my note</p> <p>info</p> <p>info</p> Sample tip  <p>tip</p> How to add plugins to the Docker image? <p>Import Stuff</p> <p>Success</p> <p>my note</p> <p>Sample warning</p> <p>This is so cool.</p> <p>failure</p> <p>my note</p> <p>danger</p> <p>danger</p> <p>bug</p> <p>bug</p> Sample example <p>example</p> <p>Sample warning</p> <p>warning</p> Sample wuote <p>quote</p>"},{"location":"cheat/#tooltip","title":"Tooltip","text":"<pre><code>wanna a tooltip ? # (1)!\n</code></pre> <ol> <li> <p>Cedrick rock</p> <pre><code>mkdocs serve\n</code></pre> </li> </ol>"},{"location":"cheat/#icons","title":"Icons","text":""},{"location":"cheat/#material","title":"Material","text":"<p>HERE is the full list</p>"},{"location":"cheat/#font-awesome","title":"Font Awesome","text":"<p>HTML</p> <li> = fa-camera-retro</li> <p>MARKDOWN </p> <p>HERE is the full list</p>"},{"location":"cheat/#opticons","title":"Opticons","text":"<p> Sample</p>"},{"location":"cheat/#adding-buttons","title":"Adding buttons","text":"<p>In order to render a link as a button, suffix it with curly braces and add the <code>.md-button</code> class selector to it. The button will receive the selected [primary color] and [accent color] if active.</p> Button<pre><code>[Subscribe to our newsletter](#){ .md-button }\n</code></pre> <p>[Subscribe to our newsletter][demo]{ .md-button }</p> <p>[Subscribe to our newsletter][demo]{ .md-button .md-button--primary }</p>"},{"location":"pages/configuration/","title":"Configuration","text":"<p>Configuration Home</p>"},{"location":"pages/basics/","title":"Index","text":""},{"location":"pages/basics/#introductory-video","title":"Introductory Video","text":"<p>A 15-min video going over the main use cases and a demo with microservices. The associated source code can be found here</p> <p></p>"},{"location":"pages/documentation/installation/","title":"Installation","text":"Prerequisites <ul> <li> Install Java Development Kit (JDK) 8+</li> </ul> <p>Use java reference documentation targetting your operating system to install a Java Development Kit. You can then validate your installation with the following command.</p> <pre><code>java --version\n</code></pre> <ul> <li> Install Apache Maven (3.8+)</li> </ul> <p>Samples and tutorials have been designed with <code>Apache Maven</code>. Use the reference documentation top install maven validate your installation with </p> <pre><code>mvn -version\n</code></pre>"},{"location":"pages/documentation/installation/#core-dependency","title":"Core Dependency","text":"<p><code>${project.version}</code> (Latest version) =  </p> <p>To install the latest version of <code>langchain4j</code> with Maven, add the following dependency to your <code>pom.xml</code> file.</p> <pre><code> &lt;dependency&gt;\n&lt;groupId&gt;dev.langchain4j&lt;/groupId&gt;\n&lt;artifactId&gt;langchain4j&lt;/artifactId&gt;\n&lt;version&gt;${project.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>To install with Gradle here is the line to add to the <code>build.gradle</code> file:</p> <pre><code>implementation 'dev.langchain4j:langchain4j:${project.version}'\n</code></pre>"},{"location":"pages/documentation/installation/#external-stores","title":"External Stores","text":"<p>If you save your embeddings in an external vector store database, you can use the following dependency:(_here we use pinecone but several are available) to learn more please check the integration page</p> <pre><code> &lt;dependency&gt;\n&lt;groupId&gt;dev.langchain4j&lt;/groupId&gt;\n&lt;artifactId&gt;langchain4j-pinecone&lt;/artifactId&gt;\n&lt;version&gt;${project.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>With Gradle it will translate to:</p> <pre><code>implementation 'dev.langchain4j:langchain4j-pinecone:${project.version}'\n</code></pre>"},{"location":"pages/documentation/introduction/","title":"Introduction","text":"<p>info</p> <p>This project is in active development</p>"},{"location":"pages/documentation/introduction/#project-goals","title":"Project goals","text":"<p>The goal of this project is to simplify the integration of AI/LLM capabilities into your Java application. This can be achieved thanks to:</p> <ul> <li>A simple and coherent layer of abstractions, designed to ensure that your code does not depend on concrete implementations such as LLM providers, embedding store providers, etc. This allows for easy swapping of components.</li> <li>Numerous implementations of the above-mentioned abstractions, providing you with a variety of LLMs and embedding stores to choose from.</li> <li>Range of in-demand features on top of LLMs, such as:<ul> <li>The capability to ingest your own data (documentation, codebase, etc.), allowing the LLM to act and respond based on your data.</li> <li>Autonomous agents for delegating tasks (defined on the fly) to the LLM, which will strive to complete them.</li> <li>Prompt templates to help you achieve the highest possible quality of LLM responses.</li> <li>Memory to provide context to the LLM for your current and past conversations.</li> <li>Structured outputs for receiving responses from the LLM with a desired structure as Java POJOs.</li> <li>\"AI Services\" for declaratively defining complex AI behavior behind a simple API.</li> <li>Chains to reduce the need for extensive boilerplate code in common use-cases.</li> <li>Auto-moderation to ensure that all inputs and outputs to/from the LLM are not harmful.</li> </ul> </li> </ul>"},{"location":"pages/documentation/quickstart/","title":"QuickStart","text":""},{"location":"pages/documentation/quickstart/#hello-world","title":"Hello World","text":"<ul> <li> Make sure you have java and maven installed</li> </ul> <pre><code>java --version\nmvn --version\n</code></pre> <ul> <li> Make sure you have an openAI account.</li> </ul> <p>Specify your key as the environment variable <code>OPENAI_API_KEY</code></p> <pre><code>export OPENAI_API_KEY=sk-...\n</code></pre> <ul> <li> Implementation</li> </ul> <p>Here is the simplest snippet of code. It ia direct integration with the OpenAI API.  You can find more examples in the sample codes section.</p> <pre><code>import dev.langchain4j.data.message.AiMessage;\nimport dev.langchain4j.model.chat.ChatLanguageModel;\nimport dev.langchain4j.model.openai.OpenAiChatModel;\npublic class HelloWorldExample {\npublic static void main(String[] args) {\n// Create an instance of a model\nChatLanguageModel model = OpenAiChatModel\n.withApiKey(System.getenv(\"OPENAI_API_KEY\");\n// Start interacting\nAiMessage answer = model.sendUserMessage(\"Hello world!\");\nSystem.out.println(answer.text()); // Hello! How can I assist you today?\n}\n}\n</code></pre>"},{"location":"pages/documentation/agents/main/","title":"Main","text":"<p>todo</p>"},{"location":"pages/documentation/chains/main/","title":"Main","text":"<p>todo</p>"},{"location":"pages/documentation/memory/main/","title":"Main","text":"<p>todo</p>"},{"location":"pages/documentation/modules/language-models/","title":"Language Models","text":"<p>language models page</p>"},{"location":"pages/documentation/modules/parsers/","title":"Parsers","text":"<p>Parsers</p>"},{"location":"pages/documentation/modules/prompts/","title":"Prompts","text":"<p>Prompts Page</p>"},{"location":"pages/documentation/retrieval/document-loaders/","title":"Document Loaders","text":"<p>document loader</p>"},{"location":"pages/documentation/retrieval/document-transformers/","title":"Document transformers","text":"<p>document transformers</p>"},{"location":"pages/documentation/retrieval/retrievers/","title":"Retrievers","text":"<p>Retriviers.md</p>"},{"location":"pages/integrations/","title":"Index","text":"<p>INDEX stores</p>"},{"location":"pages/integrations/embedding/astra/","title":"Astra","text":"<p>todo</p>"},{"location":"pages/integrations/embedding/chroma/","title":"Chroma","text":"<p>todo</p>"},{"location":"pages/integrations/embedding/pinecone/","title":"Pinecone","text":"<p>todo</p>"},{"location":"pages/integrations/memory/in-memory/","title":"InMemory","text":"<p>todo</p>"},{"location":"pages/samples/","title":"Home","text":"<p>Sample Codes</p>"}]}